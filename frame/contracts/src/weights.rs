// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-06-10, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bm3`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/production/substrate
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_contracts
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_process_deletion_queue_batch() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn call_with_code_per_byte(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(s: u32, ) -> Weight;
	fn call() -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn remove_code() -> Weight;
	fn set_code() -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_is_contract(r: u32, ) -> Weight;
	fn seal_code_hash(r: u32, ) -> Weight;
	fn seal_own_code_hash(r: u32, ) -> Weight;
	fn seal_caller_is_origin(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_debug_message(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight;
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_contains_storage(r: u32, ) -> Weight;
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight;
	fn seal_take_storage(r: u32, ) -> Weight;
	fn seal_take_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_delegate_call(r: u32, ) -> Weight;
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn seal_ecdsa_recover(r: u32, ) -> Weight;
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight;
	fn seal_set_code_hash(r: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_process_deletion_queue_batch() -> Weight {
		(1_648_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(7_105_000 as Weight)
			// Standard Error: 0
			.saturating_add((879_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	/// The range of component `q` is `[0, 1024]`.
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_874_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn reinstrument(c: u32, ) -> Weight {
		(17_962_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	/// The range of component `c` is `[0, 131072]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		(207_433_000 as Weight)
			// Standard Error: 0
			.saturating_add((53_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(218_094_000 as Weight)
			// Standard Error: 0
			.saturating_add((126_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(s: u32, ) -> Weight {
		(184_236_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call() -> Weight {
		(148_764_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn upload_code(c: u32, ) -> Weight {
		(48_474_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		(29_301_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	fn set_code() -> Weight {
		(26_779_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller(r: u32, ) -> Weight {
		(210_501_000 as Weight)
			// Standard Error: 96_000
			.saturating_add((40_406_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_is_contract(r: u32, ) -> Weight {
		(98_460_000 as Weight)
			// Standard Error: 717_000
			.saturating_add((302_159_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_code_hash(r: u32, ) -> Weight {
		(100_103_000 as Weight)
			// Standard Error: 687_000
			.saturating_add((360_394_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_own_code_hash(r: u32, ) -> Weight {
		(210_131_000 as Weight)
			// Standard Error: 102_000
			.saturating_add((43_916_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		(208_603_000 as Weight)
			// Standard Error: 56_000
			.saturating_add((16_961_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_address(r: u32, ) -> Weight {
		(209_735_000 as Weight)
			// Standard Error: 102_000
			.saturating_add((40_378_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas_left(r: u32, ) -> Weight {
		(213_032_000 as Weight)
			// Standard Error: 112_000
			.saturating_add((39_716_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_balance(r: u32, ) -> Weight {
		(216_266_000 as Weight)
			// Standard Error: 149_000
			.saturating_add((117_042_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_value_transferred(r: u32, ) -> Weight {
		(210_124_000 as Weight)
			// Standard Error: 112_000
			.saturating_add((39_859_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(210_515_000 as Weight)
			// Standard Error: 117_000
			.saturating_add((40_007_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_block_number(r: u32, ) -> Weight {
		(212_737_000 as Weight)
			// Standard Error: 111_000
			.saturating_add((39_346_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_now(r: u32, ) -> Weight {
		(211_734_000 as Weight)
			// Standard Error: 112_000
			.saturating_add((39_519_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(212_008_000 as Weight)
			// Standard Error: 159_000
			.saturating_add((99_864_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas(r: u32, ) -> Weight {
		(134_321_000 as Weight)
			// Standard Error: 49_000
			.saturating_add((19_059_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_input(r: u32, ) -> Weight {
		(210_459_000 as Weight)
			// Standard Error: 102_000
			.saturating_add((39_198_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(272_954_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((9_632_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(r: u32, ) -> Weight {
		(205_473_000 as Weight)
			// Standard Error: 130_000
			.saturating_add((1_681_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(207_350_000 as Weight)
			// Standard Error: 0
			.saturating_add((183_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		(213_057_000 as Weight)
			// Standard Error: 151_000
			.saturating_add((50_517_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_random(r: u32, ) -> Weight {
		(214_002_000 as Weight)
			// Standard Error: 153_000
			.saturating_add((130_262_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_deposit_event(r: u32, ) -> Weight {
		(214_665_000 as Weight)
			// Standard Error: 219_000
			.saturating_add((236_330_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:80 w:80)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16]`.
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(455_398_000 as Weight)
			// Standard Error: 1_991_000
			.saturating_add((251_794_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 392_000
			.saturating_add((66_900_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((80 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_debug_message(r: u32, ) -> Weight {
		(139_616_000 as Weight)
			// Standard Error: 78_000
			.saturating_add((32_049_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_storage(r: u32, ) -> Weight {
		(245_092_000 as Weight)
			// Standard Error: 187_000
			.saturating_add((131_710_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		(372_948_000 as Weight)
			// Standard Error: 165_000
			.saturating_add((34_059_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		(361_086_000 as Weight)
			// Standard Error: 137_000
			.saturating_add((17_044_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_clear_storage(r: u32, ) -> Weight {
		(222_690_000 as Weight)
			// Standard Error: 190_000
			.saturating_add((108_740_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		(311_458_000 as Weight)
			// Standard Error: 111_000
			.saturating_add((16_426_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_get_storage(r: u32, ) -> Weight {
		(223_269_000 as Weight)
			// Standard Error: 163_000
			.saturating_add((101_915_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(304_319_000 as Weight)
			// Standard Error: 95_000
			.saturating_add((16_374_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_contains_storage(r: u32, ) -> Weight {
		(220_970_000 as Weight)
			// Standard Error: 154_000
			.saturating_add((92_945_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		(292_713_000 as Weight)
			// Standard Error: 101_000
			.saturating_add((16_474_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_take_storage(r: u32, ) -> Weight {
		(220_159_000 as Weight)
			// Standard Error: 171_000
			.saturating_add((119_015_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		(322_797_000 as Weight)
			// Standard Error: 109_000
			.saturating_add((16_426_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_transfer(r: u32, ) -> Weight {
		(137_099_000 as Weight)
			// Standard Error: 1_180_000
			.saturating_add((1_465_493_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 3_847_000
			.saturating_add((15_161_464_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_delegate_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 5_339_000
			.saturating_add((15_079_594_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads((79 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1024]`.
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		(9_155_312_000 as Weight)
			// Standard Error: 18_376_000
			.saturating_add((1_400_099_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 7_000
			.saturating_add((9_722_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(85 as Weight))
			.saturating_add(T::DbWeight::get().reads((81 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(81 as Weight))
			.saturating_add(T::DbWeight::get().writes((81 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:80 w:80)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 33_664_000
			.saturating_add((21_285_172_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((320 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((320 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `s` is `[0, 960]`.
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		(12_084_851_000 as Weight)
			// Standard Error: 48_270_000
			.saturating_add((746_701_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 22_000
			.saturating_add((124_017_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(167 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(165 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(207_117_000 as Weight)
			// Standard Error: 120_000
			.saturating_add((65_616_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(298_759_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((356_036_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(211_104_000 as Weight)
			// Standard Error: 162_000
			.saturating_add((72_998_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(243_076_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((245_455_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(208_430_000 as Weight)
			// Standard Error: 114_000
			.saturating_add((51_167_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(270_149_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((94_962_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(208_494_000 as Weight)
			// Standard Error: 130_000
			.saturating_add((51_502_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(271_999_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((94_942_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		(348_302_000 as Weight)
			// Standard Error: 931_000
			.saturating_add((3_073_199_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		(229_870_000 as Weight)
			// Standard Error: 572_000
			.saturating_add((2_054_105_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts OwnerInfoOf (r:16 w:16)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_552_000
			.saturating_add((757_436_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads((79 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes((79 as Weight).saturating_mul(r as Weight)))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(r: u32, ) -> Weight {
		(74_465_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((603_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(r: u32, ) -> Weight {
		(74_280_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_311_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(r: u32, ) -> Weight {
		(74_201_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_387_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(r: u32, ) -> Weight {
		(74_062_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_777_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(r: u32, ) -> Weight {
		(74_074_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_953_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(r: u32, ) -> Weight {
		(73_914_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((939_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(r: u32, ) -> Weight {
		(73_658_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_434_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(r: u32, ) -> Weight {
		(73_228_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((1_629_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(76_399_000 as Weight)
			// Standard Error: 0
			.saturating_add((4_000 as Weight).saturating_mul(e as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(r: u32, ) -> Weight {
		(74_937_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((7_088_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(r: u32, ) -> Weight {
		(87_295_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((9_133_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(98_101_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((471_000 as Weight).saturating_mul(p as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(r: u32, ) -> Weight {
		(74_727_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((624_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(r: u32, ) -> Weight {
		(74_481_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((707_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(r: u32, ) -> Weight {
		(74_484_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((918_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(r: u32, ) -> Weight {
		(77_085_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_197_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(r: u32, ) -> Weight {
		(77_052_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_366_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(r: u32, ) -> Weight {
		(74_392_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((665_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 1]`.
	fn instr_memory_grow(r: u32, ) -> Weight {
		(75_342_000 as Weight)
			// Standard Error: 46_000
			.saturating_add((177_994_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(r: u32, ) -> Weight {
		(74_090_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((893_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(r: u32, ) -> Weight {
		(74_474_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((882_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(74_326_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((886_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(r: u32, ) -> Weight {
		(74_503_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((888_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(74_178_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((888_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(73_789_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((898_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(74_202_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((892_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(r: u32, ) -> Weight {
		(74_191_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_347_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(r: u32, ) -> Weight {
		(73_945_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_359_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(r: u32, ) -> Weight {
		(74_139_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_355_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(r: u32, ) -> Weight {
		(74_165_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_347_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(r: u32, ) -> Weight {
		(73_898_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_362_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(r: u32, ) -> Weight {
		(74_078_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_364_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(r: u32, ) -> Weight {
		(73_847_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_359_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(r: u32, ) -> Weight {
		(74_166_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_362_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(r: u32, ) -> Weight {
		(73_950_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_363_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(r: u32, ) -> Weight {
		(73_652_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_365_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(r: u32, ) -> Weight {
		(73_841_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_343_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(r: u32, ) -> Weight {
		(74_117_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_328_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(r: u32, ) -> Weight {
		(73_893_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_339_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(r: u32, ) -> Weight {
		(73_803_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_028_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(r: u32, ) -> Weight {
		(74_184_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_057_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(r: u32, ) -> Weight {
		(74_084_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((2_025_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(r: u32, ) -> Weight {
		(74_069_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_027_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(r: u32, ) -> Weight {
		(74_006_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_333_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(r: u32, ) -> Weight {
		(73_959_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_335_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(r: u32, ) -> Weight {
		(74_062_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_330_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(r: u32, ) -> Weight {
		(74_023_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_354_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(r: u32, ) -> Weight {
		(74_261_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_347_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(r: u32, ) -> Weight {
		(73_843_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_368_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(r: u32, ) -> Weight {
		(74_173_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_357_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(r: u32, ) -> Weight {
		(73_827_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_365_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_process_deletion_queue_batch() -> Weight {
		(1_648_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(7_105_000 as Weight)
			// Standard Error: 0
			.saturating_add((879_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	/// The range of component `q` is `[0, 1024]`.
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_874_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn reinstrument(c: u32, ) -> Weight {
		(17_962_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	/// The range of component `c` is `[0, 131072]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		(207_433_000 as Weight)
			// Standard Error: 0
			.saturating_add((53_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(218_094_000 as Weight)
			// Standard Error: 0
			.saturating_add((126_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(s: u32, ) -> Weight {
		(184_236_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call() -> Weight {
		(148_764_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn upload_code(c: u32, ) -> Weight {
		(48_474_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		(29_301_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	fn set_code() -> Weight {
		(26_779_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller(r: u32, ) -> Weight {
		(210_501_000 as Weight)
			// Standard Error: 96_000
			.saturating_add((40_406_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_is_contract(r: u32, ) -> Weight {
		(98_460_000 as Weight)
			// Standard Error: 717_000
			.saturating_add((302_159_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_code_hash(r: u32, ) -> Weight {
		(100_103_000 as Weight)
			// Standard Error: 687_000
			.saturating_add((360_394_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_own_code_hash(r: u32, ) -> Weight {
		(210_131_000 as Weight)
			// Standard Error: 102_000
			.saturating_add((43_916_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		(208_603_000 as Weight)
			// Standard Error: 56_000
			.saturating_add((16_961_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_address(r: u32, ) -> Weight {
		(209_735_000 as Weight)
			// Standard Error: 102_000
			.saturating_add((40_378_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas_left(r: u32, ) -> Weight {
		(213_032_000 as Weight)
			// Standard Error: 112_000
			.saturating_add((39_716_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_balance(r: u32, ) -> Weight {
		(216_266_000 as Weight)
			// Standard Error: 149_000
			.saturating_add((117_042_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_value_transferred(r: u32, ) -> Weight {
		(210_124_000 as Weight)
			// Standard Error: 112_000
			.saturating_add((39_859_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(210_515_000 as Weight)
			// Standard Error: 117_000
			.saturating_add((40_007_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_block_number(r: u32, ) -> Weight {
		(212_737_000 as Weight)
			// Standard Error: 111_000
			.saturating_add((39_346_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_now(r: u32, ) -> Weight {
		(211_734_000 as Weight)
			// Standard Error: 112_000
			.saturating_add((39_519_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(212_008_000 as Weight)
			// Standard Error: 159_000
			.saturating_add((99_864_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas(r: u32, ) -> Weight {
		(134_321_000 as Weight)
			// Standard Error: 49_000
			.saturating_add((19_059_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_input(r: u32, ) -> Weight {
		(210_459_000 as Weight)
			// Standard Error: 102_000
			.saturating_add((39_198_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(272_954_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((9_632_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(r: u32, ) -> Weight {
		(205_473_000 as Weight)
			// Standard Error: 130_000
			.saturating_add((1_681_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(207_350_000 as Weight)
			// Standard Error: 0
			.saturating_add((183_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		(213_057_000 as Weight)
			// Standard Error: 151_000
			.saturating_add((50_517_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_random(r: u32, ) -> Weight {
		(214_002_000 as Weight)
			// Standard Error: 153_000
			.saturating_add((130_262_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_deposit_event(r: u32, ) -> Weight {
		(214_665_000 as Weight)
			// Standard Error: 219_000
			.saturating_add((236_330_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:80 w:80)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16]`.
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(455_398_000 as Weight)
			// Standard Error: 1_991_000
			.saturating_add((251_794_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 392_000
			.saturating_add((66_900_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((80 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_debug_message(r: u32, ) -> Weight {
		(139_616_000 as Weight)
			// Standard Error: 78_000
			.saturating_add((32_049_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_storage(r: u32, ) -> Weight {
		(245_092_000 as Weight)
			// Standard Error: 187_000
			.saturating_add((131_710_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		(372_948_000 as Weight)
			// Standard Error: 165_000
			.saturating_add((34_059_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		(361_086_000 as Weight)
			// Standard Error: 137_000
			.saturating_add((17_044_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_clear_storage(r: u32, ) -> Weight {
		(222_690_000 as Weight)
			// Standard Error: 190_000
			.saturating_add((108_740_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		(311_458_000 as Weight)
			// Standard Error: 111_000
			.saturating_add((16_426_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_get_storage(r: u32, ) -> Weight {
		(223_269_000 as Weight)
			// Standard Error: 163_000
			.saturating_add((101_915_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(304_319_000 as Weight)
			// Standard Error: 95_000
			.saturating_add((16_374_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_contains_storage(r: u32, ) -> Weight {
		(220_970_000 as Weight)
			// Standard Error: 154_000
			.saturating_add((92_945_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		(292_713_000 as Weight)
			// Standard Error: 101_000
			.saturating_add((16_474_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_take_storage(r: u32, ) -> Weight {
		(220_159_000 as Weight)
			// Standard Error: 171_000
			.saturating_add((119_015_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		(322_797_000 as Weight)
			// Standard Error: 109_000
			.saturating_add((16_426_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_transfer(r: u32, ) -> Weight {
		(137_099_000 as Weight)
			// Standard Error: 1_180_000
			.saturating_add((1_465_493_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 3_847_000
			.saturating_add((15_161_464_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_delegate_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 5_339_000
			.saturating_add((15_079_594_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads((79 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1024]`.
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		(9_155_312_000 as Weight)
			// Standard Error: 18_376_000
			.saturating_add((1_400_099_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 7_000
			.saturating_add((9_722_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(85 as Weight))
			.saturating_add(RocksDbWeight::get().reads((81 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(81 as Weight))
			.saturating_add(RocksDbWeight::get().writes((81 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:80 w:80)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 33_664_000
			.saturating_add((21_285_172_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((320 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((320 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `s` is `[0, 960]`.
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		(12_084_851_000 as Weight)
			// Standard Error: 48_270_000
			.saturating_add((746_701_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 22_000
			.saturating_add((124_017_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(167 as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(165 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(207_117_000 as Weight)
			// Standard Error: 120_000
			.saturating_add((65_616_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(298_759_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((356_036_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(211_104_000 as Weight)
			// Standard Error: 162_000
			.saturating_add((72_998_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(243_076_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((245_455_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(208_430_000 as Weight)
			// Standard Error: 114_000
			.saturating_add((51_167_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(270_149_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((94_962_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(208_494_000 as Weight)
			// Standard Error: 130_000
			.saturating_add((51_502_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(271_999_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((94_942_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		(348_302_000 as Weight)
			// Standard Error: 931_000
			.saturating_add((3_073_199_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		(229_870_000 as Weight)
			// Standard Error: 572_000
			.saturating_add((2_054_105_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts OwnerInfoOf (r:16 w:16)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_552_000
			.saturating_add((757_436_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads((79 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes((79 as Weight).saturating_mul(r as Weight)))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(r: u32, ) -> Weight {
		(74_465_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((603_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(r: u32, ) -> Weight {
		(74_280_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_311_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(r: u32, ) -> Weight {
		(74_201_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_387_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(r: u32, ) -> Weight {
		(74_062_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_777_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(r: u32, ) -> Weight {
		(74_074_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_953_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(r: u32, ) -> Weight {
		(73_914_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((939_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(r: u32, ) -> Weight {
		(73_658_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_434_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(r: u32, ) -> Weight {
		(73_228_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((1_629_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(76_399_000 as Weight)
			// Standard Error: 0
			.saturating_add((4_000 as Weight).saturating_mul(e as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(r: u32, ) -> Weight {
		(74_937_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((7_088_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(r: u32, ) -> Weight {
		(87_295_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((9_133_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(98_101_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((471_000 as Weight).saturating_mul(p as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(r: u32, ) -> Weight {
		(74_727_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((624_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(r: u32, ) -> Weight {
		(74_481_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((707_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(r: u32, ) -> Weight {
		(74_484_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((918_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(r: u32, ) -> Weight {
		(77_085_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_197_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(r: u32, ) -> Weight {
		(77_052_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_366_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(r: u32, ) -> Weight {
		(74_392_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((665_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 1]`.
	fn instr_memory_grow(r: u32, ) -> Weight {
		(75_342_000 as Weight)
			// Standard Error: 46_000
			.saturating_add((177_994_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(r: u32, ) -> Weight {
		(74_090_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((893_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(r: u32, ) -> Weight {
		(74_474_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((882_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(74_326_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((886_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(r: u32, ) -> Weight {
		(74_503_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((888_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(74_178_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((888_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(73_789_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((898_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(74_202_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((892_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(r: u32, ) -> Weight {
		(74_191_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_347_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(r: u32, ) -> Weight {
		(73_945_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_359_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(r: u32, ) -> Weight {
		(74_139_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_355_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(r: u32, ) -> Weight {
		(74_165_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_347_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(r: u32, ) -> Weight {
		(73_898_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_362_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(r: u32, ) -> Weight {
		(74_078_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_364_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(r: u32, ) -> Weight {
		(73_847_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_359_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(r: u32, ) -> Weight {
		(74_166_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_362_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(r: u32, ) -> Weight {
		(73_950_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_363_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(r: u32, ) -> Weight {
		(73_652_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_365_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(r: u32, ) -> Weight {
		(73_841_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_343_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(r: u32, ) -> Weight {
		(74_117_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_328_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(r: u32, ) -> Weight {
		(73_893_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_339_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(r: u32, ) -> Weight {
		(73_803_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_028_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(r: u32, ) -> Weight {
		(74_184_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_057_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(r: u32, ) -> Weight {
		(74_084_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((2_025_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(r: u32, ) -> Weight {
		(74_069_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_027_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(r: u32, ) -> Weight {
		(74_006_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_333_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(r: u32, ) -> Weight {
		(73_959_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_335_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(r: u32, ) -> Weight {
		(74_062_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_330_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(r: u32, ) -> Weight {
		(74_023_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_354_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(r: u32, ) -> Weight {
		(74_261_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_347_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(r: u32, ) -> Weight {
		(73_843_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_368_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(r: u32, ) -> Weight {
		(74_173_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_357_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(r: u32, ) -> Weight {
		(73_827_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_365_000 as Weight).saturating_mul(r as Weight))
	}
}
